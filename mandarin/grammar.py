# This file (grammar.py, NOT grammar.py.in) is auto-generated. Do not edit it as your changes will be overwritten.
# Edit Mandarin.lark.in instead

GRAMMAR = '// vim: set syntax=lark: \n// Mandarin compiler\n// Copyright (C) 2019  Alexander Korzun\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program. If not, see <https://www.gnu.org/licenses/>.\n\ncode: toplevel_statement*\n\n?toplevel_statement: (function_definition | native_function_declaration) NL\n\nnative_function_declaration: KW_DEF KW_NATIVE IDENTIFIER "(" typed_arglist ")" NL\n\nfunction_definition: KW_DEF IDENTIFIER "(" typed_arglist ")" NL code_block_end\n\ntyped_arglist: (typename IDENTIFIER ("," typename IDENTIFIER)* ","?)?\n\ntypename: IDENTIFIER\n\ncode_block_end: code_statement* KW_END\n\ncode_statement: expression NL\n\nexpression: front_atomic_expression (BINOP front_atomic_expression)*\n\nfront_atomic_expression: atomic_expression\n\natomic_expression: literal | IDENTIFIER | "(" expression ")"\n\nliteral: NUMBER | STRING_SINGLE | STRING_DOUBLE\n\n\nKW_DEF: "def"\nKW_NATIVE: "native"\nKW_END: "end"\nNUMBER: /[0-9]+/\nSTRING_SINGLE:      /\'([^\'\\\\]|\\\\.)*\'/\nSTRING_DOUBLE:      /"([^"\\\\]|\\\\.)*"/\n\nIDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_]*/\n\nBINOP: "*"\n    | "/"\n    | "%"\n    | "//"\n    | "+"\n    | "-"\n    | "..."\n    | ".."\n    | "=="\n    | "<="\n    | ">="\n    | "!="\n    | "<"\n    | ">"\n    | "&&"\n    | "||"\n    | "++"\n    | "+="\n    | "-="\n    | "*="\n    | "/="\n    | "//="\n    | "%="\n    | "="\n\nNL: "\\r\\n" | "\\n"\n\nWS: /[ \\t]+/\n%ignore WS\n'
# vim: set syntax=python:
